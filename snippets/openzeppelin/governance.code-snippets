{
    "Import Governor Contract": {
        "scope": "solidity",
        "prefix": "importGovernor",
        "body": "import {Governor, IGovernor} from \"@openzeppelin/contracts/governance/Governor.sol\";",
        "description": "Import Governor contract from @openzeppelin"
    },
    "Import Governor Interface": {
        "scope": "solidity",
        "prefix": "importGovernorI",
        "body": "import {IGovernor} from \"@openzeppelin/contracts/governance/IGovernor.sol\";",
        "description": "Import Governor Interface from @openzeppelin"
    },
    "Import Governor Counting Simple Contract": {
        "scope": "solidity",
        "prefix": "importGovernorCountingSimple",
        "body": "import {GovernorCountingSimple} from \"@openzeppelin/contracts/governance/extensions/GovernorCountingSimple.sol\";",
        "description": "Import Governor Counting Simple contract from @openzeppelin"
    },
    "Import Governor Votes Contract": {
        "scope": "solidity",
        "prefix": "importGovernorVotes",
        "body": "import {GovernorVotes} from \"@openzeppelin/contracts/governance/extensions/GovernorVotes.sol\";",
        "description": "Import Governor Votes contract from @openzeppelin"
    },
    "Import Governor Votes Quorum Fraction Contract": {
        "scope": "solidity",
        "prefix": "importGovernorVotesQuorumFraction",
        "body": "import {GovernorVotesQuorumFraction} from \"@openzeppelin/contracts/governance/extensions/GovernorVotesQuorumFraction.sol\";",
        "description": "Import Governor Votes Quorum Fraction contract from @openzeppelin"
    },
    "Import Governor Time Lock Control Contract": {
        "scope": "solidity",
        "prefix": "importGovernorTimelockControl",
        "body": "import {GovernorTimelockControl} from \"@openzeppelin/contracts/governance/extensions/GovernorTimelockControl.sol\";",
        "description": "Import Governor Timelock Control contract from @openzeppelin"
    },
    "Import Governor Time Lock Compound Contract": {
        "scope": "solidity",
        "prefix": "importGovernorTimelockCompound",
        "body": "import {GovernorTimelockCompound} from \"@openzeppelin/contracts/governance/extensions/GovernorTimelockCompound.sol\";",
        "description": "Import Governor Timelock Compound contract from @openzeppelin"
    },
    "Import Governor Settings Contract": {
        "scope": "solidity",
        "prefix": "importGovernorSettings",
        "body": "import {GovernorSettings} from \"@openzeppelin/contracts/governance/extensions/GovernorSettings.sol\";",
        "description": "Import Governor Settings contract from @openzeppelin"
    },
    "Import Governor Prevent Late Quorum Contract": {
        "scope": "solidity",
        "prefix": "importGovernorPreventLateQuorum",
        "body": "import {GovernorPreventLateQuorum} from \"@openzeppelin/contracts/governance/extensions/GovernorPreventLateQuorum.sol\";",
        "description": "Import Governor Prevent Late Quorum contract from @openzeppelin"
    },
    "Import Governor Storage Contract": {
        "scope": "solidity",
        "prefix": "importGovernorStorage",
        "body": "import {GovernorStorage} from \"@openzeppelin/contracts/governance/extensions/GovernorStorage.sol\";",
        "description": "Import Governor Storage contract from @openzeppelin"
    },
    "Import Time Lock Controller Contract": {
        "scope": "solidity",
        "prefix": "importTimelockController",
        "body": "import {TimelockController} from \"@openzeppelin/contracts/governance/TimelockController.sol\";",
        "description": "Import Timelock Controller contract from @openzeppelin"
    },
    "Import Votes Contract": {
        "scope": "solidity",
        "prefix": "importVotes",
        "body": "import {Votes} from \"@openzeppelin/contracts/governance/utils/Votes.sol\";",
        "description": "Import Votes contract from @openzeppelin"
    },
    "Import Votes Interface": {
        "scope": "solidity",
        "prefix": "importVotesI",
        "body": "import {IVotes} from \"@openzeppelin/contracts/governance/utils/IVotes.sol\";",
        "description": "Import Votes Interface from @openzeppelin"
    },
    "Create Governor Contract": {
        "scope": "solidity",
        "prefix": "governor",
        "body": [
            "import {Governor, IGovernor} from \"@openzeppelin/contracts/governance/Governor.sol\";",
            "",
            "contract $1 is Governor {",
            "    constructor() Governor(\"${2:name}\") {",
            "",
            "    }",
            "",
            "   function COUNTING_MODE() external view override returns (string memory) {}",
            "",
            "   function votingDelay() public view override returns (uint256) {}",
            "",
            "   function votingPeriod() public view override returns (uint256) {}",
            "",
            "   function quorum(uint256 timepoint) public view override returns (uint256) {}",
            "",
            "   function hasVoted(",
            "       uint256 proposalId,",
            "       address account",
            "   ) external view override returns (bool) {}",
            "",
            "   function _quorumReached(",
            "        uint256 proposalId",
            "   ) internal view virtual override returns (bool) {}",
            "",
            "   function _voteSucceeded(",
            "       uint256 proposalId",
            "   ) internal view virtual override returns (bool) {}",
            "",
            "   function _getVotes(",
            "       address account,",
            "       uint256 timepoint,",
            "       bytes memory params",
            "   ) internal view virtual override returns (uint256) {}",
            "",
            "   function _countVote(",
            "       uint256 proposalId,",
            "       address account,",
            "       uint8 support,",
            "       uint256 weight,",
            "       bytes memory params",
            "   ) internal virtual override {}",
            "",
            "   function clock() public view virtual override returns (uint48) {}",
            "",
            "   function CLOCK_MODE()",
            "       public",
            "       view",
            "       virtual",
            "       override",
            "       returns (string memory) {}",
            "",
            "}"
        ],
        "description": "Create Governor contract using @openzeppelin dependencies"
    },
    "Create Governor Counting Simple Contract": {
        "scope": "solidity",
        "prefix": "governorCountingSimple",
        "body": [
            "import {GovernorCountingSimple, Governor} from \"@openzeppelin/contracts/governance/extensions/GovernorCountingSimple.sol\";",
            "",
            "contract $1 is GovernorCountingSimple {",
            "    constructor() Governor(\"${2:name}\") {",
            "",
            "    }",
            "",
            "    function _getVotes(",
            "       address account,",
            "       uint256 timepoint,",
            "       bytes memory params",
            "   ) internal view virtual override returns (uint256) {}",
            "",
            "   function clock() public view virtual override returns (uint48) {}",
            "",
            "   function CLOCK_MODE()",
            "       public",
            "       view",
            "       virtual",
            "       override",
            "       returns (string memory)",
            "   {}",
            "",
            "   function votingDelay() public view virtual override returns (uint256) {}",
            "",
            "   function votingPeriod() public view virtual override returns (uint256) {}",
            "",
            "   function quorum(",
            "       uint256 timepoint",
            "   ) public view virtual override returns (uint256) {}",
            "",
            "}"
        ],
        "description": "Create Governor Counting Simple contract using @openzeppelin dependencies",
    },
    "Create Governor Votes Contract": {
        "scope": "solidity",
        "prefix": "governorVotes",
        "body": [
            "import {GovernorVotes, Governor, IVotes} from \"@openzeppelin/contracts/governance/extensions/GovernorVotes.sol\";",
            "",
            "contract $1 is GovernorVotes {",
            "    constructor(IVotes ${2:tokenAddress}) Governor(\"${2:name}\") GovernorVotes(${2:tokenAddress}) {",
            "",
            "    }",
            "",
            "    function COUNTING_MODE() external view override returns (string memory) {}",
            "",
            "    function votingDelay() public view override returns (uint256) {}",
            "",
            "    function votingPeriod() public view override returns (uint256) {}",
            "",
            "    function quorum(uint256 timepoint) public view override returns (uint256) {}",
            "",
            "    function hasVoted(",
            "        uint256 proposalId,",
            "        address account",
            "    ) external view override returns (bool) {}",
            "",
            "    function _quorumReached(",
            "        uint256 proposalId",
            "    ) internal view virtual override returns (bool) {}",
            "",
            "    function _voteSucceeded(",
            "        uint256 proposalId",
            "    ) internal view virtual override returns (bool) {}",
            "",
            "    function _countVote(",
            "        uint256 proposalId,",
            "        address account,",
            "        uint8 support,",
            "        uint256 weight,",
            "        bytes memory params",
            "    ) internal virtual override {}",
            "",
            "}"
        ],
        "description": "Create Votes contract using @openzeppelin dependencies"
    },
    "Create Governor Votes Quorum Fraction Contract": {
        "scope": "solidity",
        "prefix": "governorVotesQuorumFraction",
        "body": [
            "import {GovernorVotesQuorumFraction, GovernorVotes} from \"@openzeppelin/contracts/governance/extensions/GovernorVotesQuorumFraction.sol\";",
            "import {Governor} from \"@openzeppelin/contracts/governance/Governor.sol\";",
            "import {IVotes} from \"@openzeppelin/contracts/governance/utils/IVotes.sol\";",
            "",
            "contract $1 is GovernorVotesQuorumFraction {",
            "    constructor(IVotes ${2:tokenAddress}) GovernorVotesQuorumFraction(${3:newQuorumNumerator}) GovernorVotes(${2:tokenAddress}) Governor(\"${4:name}\") {",
            "",
            "    }",
            "",
            "    function COUNTING_MODE() external view override returns (string memory) {}",
            "",
            "    function votingDelay() public view override returns (uint256) {}",
            "",
            "    function votingPeriod() public view override returns (uint256) {}",
            "",
            "    function hasVoted(",
            "        uint256 proposalId,",
            "        address account",
            "    ) external view override returns (bool) {}",
            "",
            "   function _quorumReached(",
            "        uint256 proposalId",
            "    ) internal view virtual override returns (bool) {}",
            "",
            "    function _voteSucceeded(",
            "        uint256 proposalId",
            "    ) internal view virtual override returns (bool) {}",
            "",
            "    function _countVote(",
            "        uint256 proposalId,",
            "        address account,",
            "        uint8 support,",
            "        uint256 weight,",
            "        bytes memory params",
            "    ) internal virtual override {}",
            "",
            "}"
        ],
        "description": "Create Votes Quorum Fraction contract using @openzeppelin dependencies"
    },
    "Create Governor Time Lock Control Contract": {
        "scope": "solidity",
        "prefix": "governorTimelockControl",
        "body": [
            "import {GovernorTimelockControl, Governor, TimelockController} from \"@openzeppelin/contracts/governance/extensions/GovernorTimelockControl.sol\";",
            "",
            "contract $1 is GovernorTimelockControl {",
            "    constructor(TimelockController ${2:timelockController}) GovernorTimelockControl(${2:timelockController}) Governor(\"${3:name}\") {",
            "",
            "    }",
            "",
            "    function COUNTING_MODE() external view override returns (string memory) {}",
            "",
            "    function votingDelay() public view override returns (uint256) {}",
            "",
            "    function votingPeriod() public view override returns (uint256) {}",
            "",
            "    function quorum(uint256 timepoint) public view override returns (uint256) {}",
            "",
            "    function hasVoted(",
            "        uint256 proposalId,",
            "        address account",
            "    ) external view override returns (bool) {}",
            "",
            "    function _quorumReached(",
            "        uint256 proposalId",
            "    ) internal view virtual override returns (bool) {}",
            "",
            "    function _voteSucceeded(",
            "        uint256 proposalId",
            "    ) internal view virtual override returns (bool) {}",
            "",
            "    function _getVotes(",
            "        address account,",
            "        uint256 timepoint,",
            "        bytes memory params",
            "    ) internal view virtual override returns (uint256) {}",
            "",
            "    function _countVote(",
            "        uint256 proposalId,",
            "        address account,",
            "        uint8 support,",
            "        uint256 weight,",
            "        bytes memory params",
            "    ) internal virtual override {}",
            "",
            "    function clock() public view virtual override returns (uint48) {}",
            "",
            "    function CLOCK_MODE()",
            "        public",
            "        view",
            "        virtual",
            "        override",
            "        returns (string memory)",
            "    {}",
            "",
            "}"
        ],
        "description": "Create Governor Timelock Control contract using @openzeppelin dependencies"
    },
    "Create Governor Time Lock Compound Contract": {
        "scope": "solidity",
        "prefix": "governorTimelockCompound",
        "body": [
            "import {GovernorTimelockCompound, ICompoundTimelock} from \"@openzeppelin/contracts/governance/extensions/GovernorTimelockCompound.sol\";",
            "import {Governor} from \"@openzeppelin/contracts/governance/Governor.sol\";",
            "",
            "contract $1 is GovernorTimelockCompound {",
            "    constructor(ICompoundTimelock ${2:timelockCompound}) GovernorTimelockCompound(${2:timelockCompound}) Governor(\"${3:name}\") {",
            "",
            "    }",
            "",
            "    function COUNTING_MODE() external view override returns (string memory) {}",
            "",
            "    function votingDelay() public view override returns (uint256) {}",
            "",
            "    function votingPeriod() public view override returns (uint256) {}",
            "",
            "    function quorum(uint256 timepoint) public view override returns (uint256) {}",
            "",
            "    function hasVoted(",
            "        uint256 proposalId,",
            "        address account",
            "    ) external view override returns (bool) {}",
            "",
            "    function _quorumReached(",
            "        uint256 proposalId",
            "    ) internal view virtual override returns (bool) {}",
            "",
            "    function _voteSucceeded(",
            "        uint256 proposalId",
            "    ) internal view virtual override returns (bool) {}",
            "",
            "    function _getVotes(",
            "        address account,",
            "        uint256 timepoint,",
            "        bytes memory params",
            "    ) internal view virtual override returns (uint256) {}",
            "",
            "    function _countVote(",
            "        uint256 proposalId,",
            "        address account,",
            "        uint8 support,",
            "        uint256 weight,",
            "        bytes memory params",
            "    ) internal virtual override {}",
            "",
            "    function clock() public view virtual override returns (uint48) {}",
            "",
            "    function CLOCK_MODE()",
            "        public",
            "        view",
            "        virtual",
            "        override",
            "        returns (string memory)",
            "    {}",
            "",
            "}"
        ],
        "description": "Create Governor Timelock Compound contract using @openzeppelin dependencies",
    },
    "Create Governor Settings Contract": {
        "scope": "solidity",
        "prefix": "governorSettings",
        "body": [
            "import {GovernorSettings, Governor} from \"@openzeppelin/contracts/governance/extensions/GovernorSettings.sol\";",
            "",
            "contract $1 is GovernorSettings {",
            "   constructor() GovernorSettings(${2:initialVotingDelay}, ${3:initialVotingPeriod}, ${4:initialProposalThreshold}) Governor(\"${5:name}\") {",
            "",
            "   }",
            "",
            "   function COUNTING_MODE() external view override returns (string memory) {}",
            "",
            "   function quorum(uint256 timepoint) public view override returns (uint256) {}",
            "",
            "   function hasVoted(",
            "       uint256 proposalId,",
            "       address account",
            "   ) external view override returns (bool) {}",
            "",
            "   function _quorumReached(",
            "       uint256 proposalId",
            "   ) internal view virtual override returns (bool) {}",
            "",
            "   function _voteSucceeded(",
            "       uint256 proposalId",
            "   ) internal view virtual override returns (bool) {}",
            "",
            "   function _getVotes(",
            "       address account,",
            "       uint256 timepoint,",
            "       bytes memory params",
            "   ) internal view virtual override returns (uint256) {}",
            "",
            "   function _countVote(",
            "       uint256 proposalId,",
            "       address account,",
            "       uint8 support,",
            "       uint256 weight,",
            "       bytes memory params",
            "   ) internal virtual override {}",
            "",
            "   function clock() public view virtual override returns (uint48) {}",
            "",
            "   function CLOCK_MODE()",
            "       public",
            "       view",
            "       virtual",
            "       override",
            "       returns (string memory)",
            "   {}",
            "",
            "}"
        ],
        "description": "Create Governor Settings contract using @openzeppelin dependencies",
    },
    "Create Governor Prevent Late Quorum Contract": {
        "scope": "solidity",
        "prefix": "governorPreventLateQuorum",
        "body": [
            "import {GovernorPreventLateQuorum, Governor} from \"@openzeppelin/contracts/governance/extensions/GovernorPreventLateQuorum.sol\";",
            "",
            "contract $1 is GovernorPreventLateQuorum {",
            "    constructor() GovernorPreventLateQuorum(${2:initialVoteExtension}) Governor(\"${3:name}\") {",
            "    }",
            "",
            "   function COUNTING_MODE() external view override returns (string memory) {}",
            "",
            "   function votingDelay() public view override returns (uint256) {}",
            "",
            "   function votingPeriod() public view override returns (uint256) {}",
            "",
            "   function quorum(uint256 timepoint) public view override returns (uint256) {}",
            "",
            "   function hasVoted(",
            "       uint256 proposalId,",
            "       address account",
            "   ) external view override returns (bool) {}",
            "",
            "   function _quorumReached(",
            "       uint256 proposalId",
            "   ) internal view virtual override returns (bool) {}",
            "",
            "   function _voteSucceeded(",
            "       uint256 proposalId",
            "   ) internal view virtual override returns (bool) {}",
            "",
            "   function _getVotes(",
            "       address account,",
            "       uint256 timepoint,",
            "       bytes memory params",
            "   ) internal view virtual override returns (uint256) {}",
            "",
            "   function _countVote(",
            "       uint256 proposalId,",
            "       address account,",
            "       uint8 support,",
            "       uint256 weight,",
            "       bytes memory params",
            "   ) internal virtual override {}",
            "",
            "   function clock() public view virtual override returns (uint48) {}",
            "",
            "   function CLOCK_MODE()",
            "       public",
            "       view",
            "       virtual",
            "       override",
            "       returns (string memory)",
            "   {}",
            "",
            "}"
        ],
        "description": "Create Governor Prevent Late Quorum contract using @openzeppelin dependencies",
    },
    "Create Governor Storage Contract": {
        "scope": "solidity",
        "prefix": "governorStorage",
        "body": [
            "import {GovernorStorage, Governor} from \"@openzeppelin/contracts/governance/extensions/GovernorStorage.sol\";",
            "",
            "contract $1 is GovernorStorage {",
            "    constructor() Governor(\"${2:name}\") {",
            "    }",
            "",
            "   function COUNTING_MODE() external view override returns (string memory) {}",
            "",
            "   function votingDelay() public view override returns (uint256) {}",
            "",
            "   function votingPeriod() public view override returns (uint256) {}",
            "",
            "   function quorum(uint256 timepoint) public view override returns (uint256) {}",
            "",
            "   function hasVoted(",
            "       uint256 proposalId,",
            "       address account",
            "   ) external view override returns (bool) {}",
            "",
            "   function _quorumReached(",
            "       uint256 proposalId",
            "   ) internal view virtual override returns (bool) {}",
            "",
            "   function _voteSucceeded(",
            "       uint256 proposalId",
            "   ) internal view virtual override returns (bool) {}",
            "",
            "   function _getVotes(",
            "       address account,",
            "       uint256 timepoint,",
            "       bytes memory params",
            "   ) internal view virtual override returns (uint256) {}",
            "",
            "   function _countVote(",
            "       uint256 proposalId,",
            "       address account,",
            "       uint8 support,",
            "       uint256 weight,",
            "       bytes memory params",
            "   ) internal virtual override {}",
            "",
            "   function clock() public view virtual override returns (uint48) {}",
            "",
            "   function CLOCK_MODE()",
            "       public",
            "       view",
            "       virtual",
            "       override",
            "       returns (string memory)",
            "   {}",
            "",
            "}"
        ],
        "description": "Create Governor Storage contract using @openzeppelin dependencies",
    },
    "Create Time Lock Controller Contract": {
        "scope": "solidity",
        "prefix": "timelockController",
        "body": [
            "import {TimelockController} from \"@openzeppelin/contracts/governance/TimelockController.sol\";",
            "",
            "contract $1 is TimelockController {",
            "    constructor(",
            "        uint256 minDelay,",
            "        address[] memory proposers,",
            "        address[] memory executors,",
            "        address admin",
            "    ) TimelockController(minDelay, proposers, executors, admin) {}",
            "}",
        ],
        "description": "Create Time Lock Controller contract using @openzeppelin dependencies",
    },
    "Create Votes Contract": {
        "scope": "solidity",
        "prefix": "votes",
        "body": [
            "import {Votes, EIP712} from \"@openzeppelin/contracts/governance/utils/Votes.sol\";",
            "",
            "contract $1 is Votes {",
            "    constructor() EIP712(\"${2:name}\", \"${version}\") {}",
            "",
            "    function _getVotingUnits(",
            "    address",
            "   ) internal view virtual override returns (uint256) {}",
            "}",
        ],
        "description": "Create Votes contract using @openzeppelin dependencies",
    }
}